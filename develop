#!/usr/bin/env bash

COMPOSE="docker-compose"
COMPOSEBUILD="${COMPOSE} build"
COMPOSEEXEC="docker-compose exec --user=laradock workspace"
SERVICES="php-fpm nginx mysql phpmyadmin redis workspace mailhog"

# go to laradock directory
cd storage/laradock;

if [[ $# -gt 0 ]]; then

  # docker commands
  if [[ "$1" == "build" ]]; then
    shift 1
    ${COMPOSEBUILD} ${SERVICES} "$@"
  elif [[ "$1" == "force-build" ]]; then
    shift 1
    ${COMPOSEBUILD} --force-rm --no-cache ${SERVICES} "$@"
  elif [[ "$1" == "force-build-only" ]]; then
    shift 1
    ${COMPOSEBUILD} --force-rm --no-cache "$@"
  elif [[ "$1" == "start" ]]; then
    shift 1
    ${COMPOSE} up -d ${SERVICES} "$@"
  elif [[ "$1" == "stop" ]]; then
    shift 1
    ${COMPOSE} stop ${SERVICES} "$@"
  elif [[ "$1" == "kill" ]]; then
    shift 1
    ${COMPOSE} rm --force --stop ${SERVICES} "$@"
  elif [[ "$1" == "tear-down-everything" ]]; then
    shift 1
    docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)

  # project commands
  elif [[ "$1" == "bash" ]]; then
    shift 1
    ${COMPOSEEXEC} bash "$@"
  elif [[ "$1" == "php" ]]; then
    shift 1
    ${COMPOSEEXEC} php "$@"
  elif [[ "$1" == "art" || "$1" == "artisan" ]]; then
    shift 1
    ${COMPOSEEXEC} php artisan "$@"
  elif [[ "$1" == "composer" ]]; then
    shift 1
    ${COMPOSEEXEC} composer "$@"
  elif [[ "$1" == "clear-cache" ]]; then
    shift 1
    ${COMPOSEEXEC} php artisan cache:clear &&
    ${COMPOSEEXEC} php artisan route:clear &&
    ${COMPOSEEXEC} php artisan config:clear &&
    ${COMPOSEEXEC} php artisan view:clear

  # if anything else, run this on docker-compose
  else
    ${COMPOSE} "$@"
  fi
else
  # if no arguments, show docker processes
  ${COMPOSE} ps
fi
